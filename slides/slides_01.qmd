---
title: Workshop - Introdu√ß√£o √† Ci√™ncia de dados no R
subtitle: T√≥pico II - Comandos B√°sicos
format: thinkridentity-revealjs
author: Antonio Vin√≠cius Barbosa
date: last-modified
from: markdown+emoji
---


# Utilizando o `R` 

## Por que utilizar o `R`?

* Gratuito
* CRAN com mais de 20.000 \textit{pacotes}
* Comunidade ativa e colaborativa
* Versatilidade: manipula√ß√£o de dados, modelagem estat√≠stica, gr√°ficos
* Integrabilidade

## `R` no Windows

![](images/R_windows.png){fig-align="center" width="400"}



## Ambientes de desenvolvimento integrado (IDE)

* A forma mais conveniente de utilizar o `R` √© atrav√©s de uma interface gr√°fica atrav√©s de janelas.
* √â poss√≠vel interagir com o sistema atrav√©s do `shell prompt`, embora requeira maior conhecimento do usu√°rio.
* O desenvolvimento de Ambientes de Desenvolvimento Integrado (IDE) tem como objetivo facilitar a intera√ß√£o entre o usu√°rio e o sistema.  


## RStudio

![](images/RStudio-Logo-Flat.png){fig-align="center" width="300"}

RStudio √© um conjunto eficiente de ferramentas integradas [https://posit.co/](https://posit.co/)


## RStudio

![](images/rstudio_example.png){fig-align="center" width="400"}

# Como o `R` funciona?

## R B√°sico

A forma mais simples de se utilizar o `R` √© atrav√©s de opera√ß√µes b√°sicas:

```{r, echo = TRUE, collapse = TRUE}
#| code-line-numbers: "|1-2|3-4|5-6|7-8"
2 + 2
sqrt(81)
pi
print("Ol√°, mundo!")
```

Neste caso, o `R` executa a opera√ß√£o e retorna seu valor na tela.


## Opera√ß√µes b√°sicas

```{r, echo = TRUE, collapse = TRUE}
# Adicao
23 + 4

# Subtracao
13 - 5

# Multiplicao
9 * 7

# Divisao
10/3

# Exponeciacao
2^5

# Raiz quadrada
sqrt(16)

# Arredondar
round(pi, 2)

# Logaritmo (base e)
log(10)

# Logaritmo (outras bases)
log(10, 10)
```

. . .

O s√≠mbolo `#` √© utilizado para adicionar coment√°rios ao c√≥digo.


## Salvando valores em objetos

- Ao executar uma **express√£o** seu valor √© gerado, mas n√£o armazenado. 
- Uma **atribui√ß√£o**, por outro lado, salva o valor em um **objeto** (ou *vari√°vel*).
- √â, normalmente, feito atrav√©s do operador especial `<-`
- Al√©m do operador `<-`, atribui√ß√µes podem ser feitas atrav√©s `=`

```{r, echo = TRUE, collapse = TRUE}
# Lados do tri√¢ngulo 
a <- 3
b <- 4
# Obter o tamanho da hipotenusa
h = sqrt(a^2 + b^2)
h
```


## Regra de etiqueta :bookmark: 

Na maior parte do tempo, usu√°rios do `R` utilizam apenas o operador `<-` para 
atribui√ß√µes, enquanto o s√≠mbolo de igualdade (`=`) √© reservado para indicar os argumentos dentro de uma fun√ß√£o.   

```{r, echo = TRUE, collapse = TRUE}
# Ruim :( 
valor = 10
media = mean(x = 1:10)

# Bom :) 
valor <- 10
media <- mean(x = 1:10)
```



## Atribui√ß√µes

Os objetos criados s√£o armazenados na mem√≥ria e atualizados a cada nova atribui√ß√£o:

```{r, echo = TRUE, collapse = TRUE}
# Massa em kg
massa_kg <- 80
# Altura em m
altura <- 1.83
# Calcular IMC
imc <- massa_kg/(altura^2)
imc
```

## üöÄ Quizz \#1 {.inverse background-color="#386FA4"}

- Crie a vari√°vel `renda_dom` para armazenar o valor da renda total aproximada do seu domic√≠lio.
- Agora, atribua √† vari√°vel `n_pessoas` o n√∫mero de pessoas que moram no seu domic√≠lio.
- Calcule a renda domiciliar per capita e atribua √† vari√°vel `renda_pc`.

```{r, echo = FALSE, collapse = TRUE}
countdown::countdown(
  minutes = 3
)
```

## Gerenciando objetos

Para listar todos os objetos armazenados na mem√≥ria, basta utilizar a fun√ß√£o `ls()`

```{r, echo = FALSE}
rm(list=ls())
```

```{r, echo = TRUE, collapse = TRUE}
# Criar objetos
p <- pi
e <- exp(1)
r <- sqrt(2)

# Listar objetos
ls()
```

. . . 

Para excluir ou remover um objeto, utilizamos a fun√ß√£o `rm()`

```{r, echo = TRUE, collapse = TRUE}
rm(e)
ls()
```


# Pacotes üì¶ 

## Pacotes no `R`

Um **pacote** √© um conjunto de fun√ß√µes que servem para uma dada finalidade. Cada pacote possui uma documenta√ß√£o pr√≥pria explicando sua funcionalidade e exemplos de uso.

![](images/library.jpg){fig-align="center"}

## Pacotes no `R`

Para instalar um pacote espec√≠fico no `R`, fazemos:

```{r, eval=FALSE, echo = TRUE}
# Pacotes do repositorio oficial (CRAN)
install.packages("dplyr")
install.packages("remotes")

# Pacotes externos
remotes::install_github("https://github.com/ccolonescu/PoEdata")
```


. . .


Uma vez instalado, n√£o √© necess√°rio reinstalar a cada uso. No entanto, para utilizar as funcionalidades de um pacote √© necess√°rio carreg√°-lo sempre que a sess√£o for iniciada:

```{r, eval=FALSE, echo = TRUE}
library(PoEdata)
library(dplyr)
```


# Estruturas de dados 

Veremos as principais estruturas de dados do `R`:

::: {.incremental}
- **Vetores**
- **Matrizes**
- **Data frames**

:::
#  Vetores 

## Criando vetores

A constru√ß√£o de vetores (conjunto de valores) √© feito atrav√©s do operador `c()`:

```{r, echo = TRUE, collapse = T}
#| code-line-numbers: "|1-4|1-8|1-12|1-16"
# Caracter√≠sticas dos participantes
idade <- c(19, 21, 23, 24, 25, 31, 33)
idade

sexo <- c("M", "M", "F", "F", "M", "F", "M")
sexo

aluno_econ <- c(TRUE, FALSE, FALSE, TRUE, TRUE, T, F)
aluno_econ

cra <- c(8.26, 7.18, 8.02, 7.33, 6.79, 9.45, 7.65)
cra
```

## Classes

Para determinar a classe de um vetor, utilizamos a fun√ß√£o `class()`

```{r, echo = TRUE, collapse = TRUE}
class(idade)
class(sexo)
class(aluno_econ)
class(cra)
```

As classes definem a forma de **armazenamento** na mem√≥ria. Por exemplo, um vetor de n√∫meros inteiros requer menos espa√ßo de armazenamento do que os vetores num√©ricos.

## Classes

Para converter manualmente (quando poss√≠vel) a classe de um vetor, utilizamos as fun√ß√µes `as.character()`, `as.numeric()`, `as.integer()` e `as.logical()`:

```{r, echo = TRUE, collapse = TRUE}
# Modificando classes de vetores
as.integer(idade)

as.numeric(aluno_econ)

as.character(cra)
```

## Combinando vetores

Ao combinar dois vetores de classes distintas, o `R` **converte** os elementos para torn√°-los compar√°veis:

```{r, echo = TRUE, collapse = TRUE}
# Combinando vetores
v1 <- c(1, 2, 3)
v2 <- c("a", "b", "c")
v3 <- c(v1, v2)
v3
class(v3)
```

. . .

O novo vetor √© formado unicamente por caracteres. Portanto, vetores no `R`
s√£o formado com elementos de uma √∫nica classe.


## Opera√ß√£o com vetores

Considere o vetor `cra`. Podemos fazer algumas opera√ß√µes b√°sicas, tais como:

```{r, echo = TRUE, collapse = TRUE}
# Vetor 
cra <- c(8.26, 7.18, 8.02, 7.33, 6.79, 9.45, 7.65)

# M√©dia de cra
mean(cra)

# Vari√¢ncia 
var(cra)
```

## Opera√ß√£o com vetores

A fun√ß√£o `summary()` apresenta um conjunto de estat√≠sticas b√°sicas sobre um vetor:

```{r, echo = TRUE, collapse = TRUE}
summary(cra)
```

Para obter o tamanho de um vetor, utilizamos a fun√ß√£o `length()`:

```{r, echo = TRUE, collapse = TRUE}
length(cra)
```

## Outras opera√ß√µes com vetores

```{r, echo = TRUE, collapse = TRUE}
# Valor m√≠nimo  
min(cra) 

# Valor m√°ximo
max(cra)

# Soma dos elementos 
sum(cra)

# Soma acumulada dos elementos 
cumsum(cra)

# Multiplica√ß√£o por um escalar
2 * cra
```

## Opera√ß√£o com vetores 

Outras opera√ß√µes b√°sicas com vetores:

```{r, echo = TRUE, collapse = TRUE}
# Opera√ß√µes entre vetores 
a <- c(1, 2, 3, 4)
b <- c(4, 3, 2, 1)

a + b

a - b

a * b
```

## Opera√ß√£o com vetores

Algumas destas opera√ß√µes n√£o funcionam quando existem **elementos faltantes** (representados por `NA`)

```{r, echo = TRUE, collapse = TRUE}
valores_na <- c(21, 34, NA, 17, 25)
mean(valores_na)
sd(valores_na)
```

Neste caso, devemos *remover* os dados faltantes da seguinte forma:

```{r, echo = TRUE, collapse = TRUE}
mean(valores_na, na.rm = TRUE)
sd(valores_na, na.rm = T)
```

## Reciclagem dos elementos dos vetores

Podemos fazer opera√ß√µes com vetores de diferentes tamanhos. No entanto, o R
utiliza um regra de reciclagem dos seus elementos:

```{r, echo = TRUE, collapse = TRUE}
# Criando vetores
j <- c(1, 2, 3)
k <- c(2, 4, 6, 8, 10)
# Somar vetores de tamanhos distintos
soma <- j + k
soma
```

. . .

::: {.callout-note}
Equivale a soma de `c(1, 2, 3, 1, 2) + c(2, 4, 6, 8, 10)`
:::


## Regras de Etiqueta :bookmark: (2)


- Nome de objetos em min√∫sculo
- Utilize `_` para separar palavras no nome dos objetos
- Evite separar por . ou utilizar o formato `CamelCase`
- Use nomes informativos para os objeto
- N√£o fa√ßa reuso do nome dos objetos em uma mesma an√°lise

```{r, collapse = TRUE, eval = FALSE}
# Bom :)
empregados_admitidos_2022

# Ruim :(
num.emp.adm.2022
NumeroEmpregadosAdmitidos2022
EMP_2_2022
```



## Sequ√™ncias

O `R` possui algumas funcionalidades para gerar sequ√™ncias num√©ricas:


```{r, echo = TRUE, collapse = TRUE}
# Sequencias
1:7

seq(from = 1, to = 10, by = 2)

letters[1:8] 

rep(2, times = 5)

rep(c(6, 7), each = 3)
```

## Opera√ß√µes l√≥gicas

O `R` possui **dois** valores l√≥gicos, `TRUE` e `FALSE`. Os operadores de compara√ß√£o entre dois objetos s√£o: 

- `==` &nbsp; igual  
- `!=` &nbsp; diferente
- `<` &nbsp; menor que
- `>` &nbsp; maior que 
- `<=` &nbsp; menor ou igual que
- `>=` &nbsp; maior ou igual que


## Opera√ß√µes l√≥gicas

Seguem alguns exemplos de como s√£o feitas as compara√ß√µes entre dois valores: 

```{r, echo = TRUE, collapse = TRUE}
# Operacoes logicas
4 >= 3

"a" == "A"

c(12, 4) != c(12, 5)

4 < pi
```

## Selecionando elementos em um vetor

Para selecionar um ou mais elementos de um vetor, utilizamos o operador `[ ]`

```{r, echo = TRUE, collapse = TRUE}
# Vetor com informacoes de receita (em mil reais)
receita <- c(43.9, 45.4, 48.2, 51.8, 56.5)

# Selecionar o primeiro elemento
receita[1]

# Selecionar uma sequ√™ncia de elementos
receita[3:5]
```


## Selecionando elementos em um vetor

Para exluir elementos do vetor, utilizamos o sinal `-` antes do indexador da posi√ß√£o

```{r, echo = TRUE, collapse = TRUE}
# Excluir o primeiro elemento
receita[-1]

# Excluir uma sequ√™ncia de elementos
receita[-c(3:5)]

# Excluir o √∫ltimo elemento
receita[-c(length(receita))] 
```

## Selecionando elementos em um vetor

Podemos utilizar opera√ß√µes l√≥gicas para selecionar elementos em um vetor

```{r, echo = TRUE, collapse = TRUE}
#| code-line-numbers: "1|1-5|1-8|1-12|1-17"
valores <- c(13, 18, 25, 7, NA, 36)

# Selecao de elementos
valores[valores > 15]

valores[!is.na(valores)]

# Interse√ß√£o (E)
valores[!is.na(valores) & valores > 15]

# Uni√£o (OU)
x <- 1:10
x[x < 5 | x > 8]
```


## Regras de Etiqueta :bookmark:  (3)

<h2><font color="736f72"> Espa√ßamento </font> </h2>

- √â uma boa pr√°tica colocar um espa√ßo antes e depois de cada operador fixo (`=`, `+`, `-`, `<-`, etc)
- Sempre coloque um espa√ßo ap√≥s a v√≠rgula e nunca antes (como no portugu√™s escrito). 

```{r, echo = TRUE, collapse = TRUE}
# Bom :)
idade <- c(19, 21, 23, 24, 25, 31, 33)
media_idade <- mean(idade, na.rm = TRUE)

# Ruim :(
idade<-c(19 ,21,23 ,24,25 ,31 ,33)
media_idade<-mean(idade,na.rm=TRUE)
```

## üöÄ Quizz \#2 {.inverse background-color="#386FA4"}

Considere o vetor `lista_vegana <- c("maca", "banana", "laranja", "kiwi", "batata", "brocolis")`

- Quantos elementos o vetor `lista_vegana` possui?
- Qual a classe do vetor?
- Selecione o elemento `laranja`
- Selecione apenas os vegetais utilizando a condi√ß√£o `|`
- Exclua o elemento `kiwi` baseado na sua posi√ß√£o no vetor
- Adicione `tomate` ao vetor.

```{r, echo = FALSE, collapse = TRUE}
countdown::countdown(
  minutes = 5
)
```

#  Matrizes

## Matrizes

Uma **matriz** √© simplesmente um vetor com **dimens√µes**. Para entender o conceito de matrizes,
considere um vetor √∫nico com receita e despesa de tr√™s munic√≠pios:

```{r,  echo = TRUE, collapse = TRUE}
# Contas dos municipios (receitas e despesas)
contas_munic <- c(23.7, 19.5, 13.8, 13.4, 22.1, 21.9)
dim(contas_munic) # dim() mostra o atributo dimensao 
```

. . .

Para melhor visualizar as informa√ß√µes, podemos atribuir ao vetor a dimens√£o 2x3

```{r,  echo = TRUE, collapse = TRUE}
dim(contas_munic) <- c(2, 3)  
contas_munic
```

Portanto, o resultado √© uma **matriz** com **duas** linhas e **tr√™s** colunas.

## Matrizes

Podemos criar uma matriz atrav√©s da fun√ß√£o `matrix()`.

```{r,  echo = TRUE, collapse = TRUE}
# Matriz de contas dos municipios
contas_matriz <- matrix(data = contas_munic, nrow = 2, ncol = 3, 
                        byrow = F)
contas_matriz
dim(contas_matriz)
```

## Matrizes

Para **selecionar** um elemento de uma matriz, devemos informar
os √≠ndices relativos √† linha `i` e √† coluna `j` atrav√©s do
operador `[i,j]`. Por exemplo:

```{r,  echo = TRUE, collapse = TRUE}
# Selecionar elementos da matriz
contas_matriz[1,2]
contas_matriz[2,3]
contas_matriz[1, ]
contas_matriz[ ,1]
```

## Matrizes

Al√©m disso, podemos atribuir nomes para as linhas e colunas de uma matriz:

```{r,  echo = TRUE, collapse = TRUE}
# Atribuir nomes as dimens√µes
colnames(contas_matriz) <- c("Patos", "Conde", "Areia")
rownames(contas_matriz) <- c("Receita", "Despesa")
contas_matriz 

```

. . . 

E selecionar atrav√©s do seu nome:

```{r,  echo = TRUE, collapse = TRUE}
# Selecionar elementos
contas_matriz["Receita", "Patos"] 
contas_matriz["Despesa", "Areia"]
contas_matriz[ , "Conde"] 
```


## Matrizes

√â poss√≠vel criar matrizes atrav√©s da jun√ß√£o de colunas (`cbind`) ou linhas (`rbind`):

```{r,  echo = TRUE, collapse = TRUE}
# Considere dois vetores
a <- c(1, 2, 3) 
b <- c(5, 6, 7)

# Jun√ß√£o por linhas
m <- rbind(a, b)
m
```

## Matrizes

√â poss√≠vel criar matrizes atrav√©s da jun√ß√£o de colunas `cbind()` ou linhas `rbind()`:

```{r,  echo = TRUE, collapse = TRUE}
# Considere dois vetores
c <- c(1, 3, 5) 
d <- c(2, 4, 6)

# Jun√ß√£o por colunas
j <- cbind(c, d)
j
```


## Opera√ß√µes com matrizes

Algumas opera√ß√µes usuais com matrizes s√£o as seguintes:

```{r,  echo = TRUE, collapse = TRUE}
# Transpor uma matriz
t(contas_matriz)

# Multiplicar por um escalar
1000000 * contas_matriz
```

## üöÄ Quizz \#3 {.inverse background-color="#386FA4"}

- Crie tr√™s vetores `x`, `y` e `z` com inteiros, cada um com 3 elementos. Combine os tr√™s vetores para formar uma matriz `A` (3 √ó 3), onde cada coluna representa um vetor. Altere os nomes das linhas para `a`, `b` e `c`.
- Crie um vetor com 12 elementos do tipo `numeric`. Converta o vetor em uma matriz `B` (4 x 3) usando `matrix()`. Preencha os elementos por linha ajustando o argumento `byrow = TRUE`.
- Obtenha a transposta da matriz `B` e multipique pela matriz original `B`. Qual a dimens√£o da matriz obtida?

```{r, echo = FALSE, collapse = TRUE}
countdown::countdown(
  minutes = 10
)
```

# Data Frames

## Data frames
Um **data frame** √© uma das estruturas mais importantes para armazanamento de dados. Equivale, de certa forma, √†s *planilhas eletr√¥nicas* com linhas e colunas. 


* Um data frame √© um conjunto de vetores de mesmo tamanho;
* Cada **linha** representa informa√ß√µes para uma √∫nica unidade de observa√ß√£o
* Cada **coluna** representa uma caracter√≠stica observada das unidades;
* Elementos da mesma coluna devem ser do mesma classe.  

![](images/data_frame.png){fig-align="center"}


## Data frames

√â poss√≠vel criar, carregar (dados dos pacotes) ou ler arquivos diretamente no `R`. Para criar um data frame, fazemos:

```{r, echo = TRUE, collapse = TRUE}
alunos_ufpb <- data.frame(
  aluno = c("Jos√©", "Maria", "Pedro", "Carla", "Isabel"),
  economia = c(1, 0, 0, 1, 1),
  periodo = c(3, 4, 7, 2, 3),
  cra = c(7.34, 8.45, 8.05, 7.98, 9.03)
  )

alunos_ufpb
```

## Data frames

Para carregar dados dos pacotes, fazemos:

```{r, echo = TRUE, collapse = TRUE}
#install.packages("dados")
head(dados::dados_gapminder)
```

## Data frames

Algumas caracter√≠sticas dos dados:

```{r, echo = TRUE, collapse = TRUE}
# Estrutura dos dados
str(dados::dados_gapminder)

# Listar variaveis
names(dados::dados_gapminder)
```

## 

![](images/10_lines_code.jpeg){fig-align="center"}