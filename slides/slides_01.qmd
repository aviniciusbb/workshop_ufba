---
title: Introdução à Ciência de dados no R
subtitle: Workshop - Universidade Federal da Bahia
format: thinkridentity-revealjs
author: Antonio Vinícius Barbosa
date: last-modified
from: markdown+emoji
---


## Sobre mim

<h3><font color="#FF773D"> Antonio Vinícius Barbosa :wave: </font></h3> 

::: {.incremental}

- Doutor em Economia pelo PIMES/UFPE e Universitat Pompeu Fabra. 
- Professor do Departamento de Economia da Universidade Federal da Paraíba. 
- Professor do Programa de Pós-graduação em Economia (PPGE/UFPB).
- Pesquisador do LEMA (Laboratório de Economia e Modelagem Aplicada).

:::


# <font color="#FF773D"> O que é Ciência de Dados? </font>  {background-color="#E3E3E3"}


## O que é Ciência de Dados?


> A **Ciência de Dados** é a área de estudo dos **dados** desde seu processo de 
captura, transformação, análise e, posteriormente, da geração de *informações*  e
*conhecimento* para empresas, para o setor público e para mundo dos negócios.


![](images/Data-science.png){fig-align="center" width="400"}


## O fluxo da Ciência de Dados

![](images/fluxo_data_science.png){fig-align="center" width="400"}

Adaptado de [Alfred Reinold Baudisch](https://medium.com/@AlfredBaudisch/o-que-é-ciência-de-dados-data-science-7af5bdac101a)


# <font color="#FF773D"> O que NÃO é Ciência de Dados? </font> {background-color="#E3E3E3"}


## O que NÃO é Ciência de Dados?


![](images/ugly_graph_3.png){fig-align="center" width="400"}

Informações *descontextualizadas* não configuram o campo da Ciência de Dados, pois 
*não geram conhecimento relevante*.


## O que NÃO é Ciência de Dados?


![](images/one_imply.jpg){fig-align="center" width="400"}

Replicar códigos e análises de outras fontes não o faz um Cientista de Dados. É necessário
dominar um conjunto de técnicas e ter conhecimento teórico do assunto.



## O que NÃO é Ciência de Dados?

![](images/data_scientist_sexy.jpeg){fig-align="center" width="400"}

É de fundamental importância a *interação* e a *comunicação* em equipe sobre os 
métodos e resultados para o desenvovimento da Ciência de Dados. É um campo *multidisciplinar*.


# <font color="#FF773D"> Ciência de Dados não é a respeito do software **X** ou sobre a linguagem **Y**... </font> {background-color="#E3E3E3"}


# <font color="#FF773D"> ..., mas sobre aprender a manipular dados e gerar conhecimento! </font> {background-color="#E3E3E3"}





## A Ciência dos Dados e os Novos Paradigmas


![](images/click1.png){fig-align="center" width="400"}



## A Ciência dos Dados e os Novos Paradigmas


![](images/click2.png){fig-align="center" width="400"}

## A Ciência dos Dados e os Novos Paradigmas


![](images/click3.png){fig-align="center" width="400"}



## A Ciência dos Dados e os Novos Paradigmas


![](images/click4.png){fig-align="center" width="400"}


## A Ciência dos Dados e os Novos Paradigmas


![](images/click5.png){fig-align="center" width="400"}



## A Ciência dos Dados e os Novos Paradigmas


![](images/click6.png){fig-align="center" width="400"}


## A Ciência dos Dados e os Novos Paradigmas
<br><br>

![](images/openai.png){fig-align="center" width="400"}

<br><br>

A [OpenAI](https://openai.com/blog/chatgpt/) é a empresa que criou, no final de 2022, o **ChatGPT**. 


## Economia e Ciência de Dados

![](images/economics_ds.png){fig-align="center" width="400"}

Link: [https://medium.com/@metjush/4-reasons-why-economists-make-great-data-scientists-and-why-no-one-tells-them-524478845ec2](https://medium.com/@metjush/4-reasons-why-economists-make-great-data-scientists-and-why-no-one-tells-them-524478845ec2)


## De onde vêm os dados?

![](images/stork_bg.png){fig-align="center" width="400"}


## De onde vêm os dados?

![](images/censo.jpg){fig-align="center" width="400"}

## De onde vêm os dados?

![](images/nfe.jpg){fig-align="center" width="400"}

## De onde vêm os dados?

![](images/social_network.jpg){fig-align="center" width="400"}

## Observando o Airbnb


![](images/airbnb.png){fig-align="center" width="400"}


Através dos dados da plataforma do  [http://insideairbnb.com](http://insideairbnb.com) é possível entender, por exemplo, o efeito sobre preço de imóveis. 



## Observando o Airbnb


![](images/airbnb_bcn.jpg){fig-align="center" width="400"}

Em *Barcelona*, por exemplo, o preço dos alugueis e de compra dos imóveis cresceram tanto em regiões mais concentradas quanto em menos concentradas.


## Dados do Uber

![](images/uber_data.png){fig-align="center" width="400"}


Informações sobre o tempo da corrida [https://movement.uber.com/](https://movement.uber.com/)  informam sobre o deslocamento da população nas cidades...



## Efeitos sobre Saúde


![](images/commuting.png){fig-align="center" width="400"}

... e isso afeta saúde, produtividade, salários e o PIB dos municípios.





## Por que utilizar o `R`?

![The R Project for Statistical Computing](images/R_logo.png){fig-align="center" width="300"}


## Por que utilizar o `R`?

* Software gratuito
* CRAN com mais de 10.000 \textit{pacotes}
* Comunidade ativa e colaborativa
* Versatilidade: manipulação de dados, modelagem estatística, gráficos
* Integrabilidade


## Principais linguagens

![](images/languages.png){fig-align="center" width="400"}

## Instalando o `R`

![1. Acessar [https://cran.r-project.org/](https://cran.r-project.org/) e clicar em `'download R'`.](images/install_R_initial.png){fig-align="center" width="400"}


## Instalando o `R`

![2.Selecione o mirror (servidor onde o `R` está disponível para download).](images/mirror.png){fig-align="center" width="400"}

## Instalando o `R`

![3. Selecionar o sistema operacional.](images/install_R.png){fig-align="center" width="400"}



## Instalando o `R`

![4. Selecione a opção para instalar o `R` pela primeira vez](images/install_mirrors_R.png){fig-align="center" width="400"}

## Instalando o `R`

![5. Selecione a versão mais recente e aguarde o download](images/install_final_R.png){fig-align="center" width="400"}




## `R` no Windows

![Interface do \texttt{R} no Windows](images/R_windows.png){fig-align="center" width="400"}



## Ambientes de desenvolvimento integrado (IDE)

* A forma mais conveniente de utilizar o `R` é através de uma interface gráfica através de janelas.
* É possível interagir com o sistema através do \textit{shell prompt}, embora requeira maior conhecimento do usuário.
* O desenvolvimento de Ambientes de Desenvolvimento Integrado (IDE) tem como objetivo facilitar a interação entre o usuário e o sistema.  


## RStudio

![](images/RStudio-Logo-Flat.png){fig-align="center" width="400"}

RStudio é um conjunto eficiente de ferramentas integradas [https://posit.co/](https://posit.co/)


## Instalando o RStudio


![](images/rstudio.png){fig-align="center" width="400"}

## Instalando o RStudio


![](images/rstudio_download.png){fig-align="center" width="400"}

## Instalando o RStudio


![](images/rstudio_options.png){fig-align="center" width="400"}


## Instalando o RStudio


![Ambiente do RStudio](images/rstudio_example.png){fig-align="center" width="400"}


## Outras IDEs

Além do RStudio, existem outras interfaces pra utilizar o `R`:

- [Positron IDE](https://github.com/posit-dev/positron)
- [Visual Studio Code](https://code.visualstudio.com/)
- [Sublime Text](https://www.sublimetext.com/)
- [Posit Cloud](https://posit.cloud/)


# Utilizando o `R` 

## Por que utilizar o `R`?

* Gratuito
* CRAN com mais de 20.000 \textit{pacotes}
* Comunidade ativa e colaborativa
* Versatilidade: manipulação de dados, modelagem estatística, gráficos
* Integrabilidade

## `R` no Windows

![](images/R_windows.png){fig-align="center" width="400"}



## Ambientes de desenvolvimento integrado (IDE)

* A forma mais conveniente de utilizar o `R` é através de uma interface gráfica através de janelas.
* É possível interagir com o sistema através do `shell prompt`, embora requeira maior conhecimento do usuário.
* O desenvolvimento de Ambientes de Desenvolvimento Integrado (IDE) tem como objetivo facilitar a interação entre o usuário e o sistema.  


## RStudio

![](images/RStudio-Logo-Flat.png){fig-align="center" width="300"}

RStudio é um conjunto eficiente de ferramentas integradas [https://posit.co/](https://posit.co/)


## RStudio

![](images/rstudio_example.png){fig-align="center" width="400"}

# Como o `R` funciona?

## R Básico

A forma mais simples de se utilizar o `R` é através de operações básicas:

```{r, echo = TRUE, collapse = TRUE}
#| code-line-numbers: "|1-2|3-4|5-6|7-8"
2 + 2
sqrt(81)
pi
print("Olá, mundo!")
```

Neste caso, o `R` executa a operação e retorna seu valor na tela.


## Operações básicas

```{r, echo = TRUE, collapse = TRUE}
# Adicao
23 + 4

# Subtracao
13 - 5

# Multiplicao
9 * 7

# Divisao
10/3

# Exponeciacao
2^5

# Raiz quadrada
sqrt(16)

# Arredondar
round(pi, 2)

# Logaritmo (base e)
log(10)

# Logaritmo (outras bases)
log(10, 10)
```

. . .

O símbolo `#` é utilizado para adicionar comentários ao código.


## Salvando valores em objetos

- Ao executar uma **expressão** seu valor é gerado, mas não armazenado. 
- Uma **atribuição**, por outro lado, salva o valor em um **objeto** (ou *variável*).
- É, normalmente, feito através do operador especial `<-`
- Além do operador `<-`, atribuições podem ser feitas através `=`

```{r, echo = TRUE, collapse = TRUE}
# Lados do triângulo 
a <- 3
b <- 4
# Obter o tamanho da hipotenusa
h = sqrt(a^2 + b^2)
h
```


## Regra de etiqueta :bookmark: 

Na maior parte do tempo, usuários do `R` utilizam apenas o operador `<-` para 
atribuições, enquanto o símbolo de igualdade (`=`) é reservado para indicar os argumentos dentro de uma função.   

```{r, echo = TRUE, collapse = TRUE}
# Ruim :( 
valor = 10
media = mean(x = 1:10)

# Bom :) 
valor <- 10
media <- mean(x = 1:10)
```



## Atribuições

Os objetos criados são armazenados na memória e atualizados a cada nova atribuição:

```{r, echo = TRUE, collapse = TRUE}
# Massa em kg
massa_kg <- 80
# Altura em m
altura <- 1.83
# Calcular IMC
imc <- massa_kg/(altura^2)
imc
```

## 🚀 Quizz \#1 {.inverse background-color="#386FA4"}

- Crie a variável `renda_dom` para armazenar o valor da renda total aproximada do seu domicílio.
- Agora, atribua à variável `n_pessoas` o número de pessoas que moram no seu domicílio.
- Calcule a renda domiciliar per capita e atribua à variável `renda_pc`.

```{r, echo = FALSE, collapse = TRUE}
countdown::countdown(
  minutes = 3
)
```

## Gerenciando objetos

Para listar todos os objetos armazenados na memória, basta utilizar a função `ls()`

```{r, echo = FALSE}
rm(list=ls())
```

```{r, echo = TRUE, collapse = TRUE}
# Criar objetos
p <- pi
e <- exp(1)
r <- sqrt(2)

# Listar objetos
ls()
```

. . . 

Para excluir ou remover um objeto, utilizamos a função `rm()`

```{r, echo = TRUE, collapse = TRUE}
rm(e)
ls()
```


# <font color="#FF773D"> Pacotes </font> 📦  {background-color="#E3E3E3"}

## Pacotes no `R`

Um **pacote** é um conjunto de funções que servem para uma dada finalidade. Cada pacote possui uma documentação própria explicando sua funcionalidade e exemplos de uso.

![](images/library.jpg){fig-align="center"}

## Pacotes no `R`

Para instalar um pacote específico no `R`, fazemos:

```{r, eval=FALSE, echo = TRUE}
# Pacotes do repositorio oficial (CRAN)
install.packages("dplyr")
install.packages("stringr")
```


. . .


Uma vez instalado, não é necessário reinstalar a cada uso. No entanto, para utilizar as funcionalidades de um pacote é necessário carregá-lo sempre que a sessão for iniciada:

```{r, eval=FALSE, echo = TRUE}
library(dplyr)
library(stringr)
```


# <font color="#FF773D"> Estruturas de dados </font> {background-color="#E3E3E3"}

Veremos as principais estruturas de dados do `R`:

::: {.incremental}
- **Vetores**
- **Data frames**

:::

#  <font color="#FF773D"> Vetores </font> {background-color="#E3E3E3"}

## Criando vetores

A construção de vetores (conjunto de valores) é feito através do operador `c()`:

```{r, echo = TRUE, collapse = T}
#| code-line-numbers: "|1-4|1-8|1-12|1-16"
# Características dos participantes
idade <- c(19, 21, 23, 24)
idade

nome <- c("Maria", "João", "Ana", "Pedro")
nome

aluno_econ <- c(TRUE, FALSE, TRUE, FALSE)
aluno_econ

nota <- c(8.26, 7.18, 8.02, 7.33)
nota
```

## Classes

Para determinar a classe de um vetor, utilizamos a função `class()`

```{r, echo = TRUE, collapse = TRUE}
class(idade)
class(nome)
class(aluno_econ)
class(nota)
```

As classes definem a forma de **armazenamento** na memória. Por exemplo, um vetor de números inteiros requer menos espaço de armazenamento do que os vetores numéricos.


## Combinando vetores

Ao combinar dois vetores de classes distintas, o `R` **converte** os elementos para torná-los comparáveis:

```{r, echo = TRUE, collapse = TRUE}
# Combinando vetores
v1 <- c(1, 2, 3)
v2 <- c("a", "b", "c")
v3 <- c(v1, v2)
v3
class(v3)
```

. . .

O novo vetor é formado unicamente por caracteres. Portanto, vetores no `R`
são formado com elementos de uma única classe (homogêneos).


## Operação com vetores

Considere o vetor `cra`. Podemos fazer algumas operações básicas, tais como:

```{r, echo = TRUE, collapse = TRUE}
# Vetor 
nota <- c(8.26, 7.18, 8.02, 7.33)

# Media das notas
mean(nota)

# Desvio padrao das notas
sd(nota)
```

## Operação com vetores

A função `summary()` apresenta um conjunto de estatísticas básicas sobre um vetor:

```{r, echo = TRUE, collapse = TRUE}
summary(nota)
```

Para obter o tamanho de um vetor, utilizamos a função `length()`:

```{r, echo = TRUE, collapse = TRUE}
length(nota)
```

## Outras operações com vetores

```{r, echo = TRUE, collapse = TRUE}
# Valor mínimo  
min(nota) 

# Valor máximo
max(nota)

# Soma dos elementos 
sum(nota)

# Soma acumulada dos elementos 
cumsum(nota)

# Multiplicação por um escalar
2 * nota
```

## Operação com vetores 

Outras operações básicas com vetores:

```{r, echo = TRUE, collapse = TRUE}
# Operações entre vetores 
a <- c(1, 2, 3, 4)
b <- c(4, 3, 2, 1)

a + b

a - b

a * b
```

## Operação com vetores

Algumas destas operações não funcionam quando existem **elementos faltantes** (representados por `NA`)

```{r, echo = TRUE, collapse = TRUE}
valores_na <- c(21, 34, NA, 17, 25)
mean(valores_na)
sd(valores_na)
```

Neste caso, devemos *remover* os dados faltantes da seguinte forma:

```{r, echo = TRUE, collapse = TRUE}
mean(valores_na, na.rm = TRUE)
sd(valores_na, na.rm = T)
```


## Regras de Etiqueta :bookmark: (2)

- Nome de objetos em minúsculo
- Utilize `_` para separar palavras no nome dos objetos
- Evite separar por . ou utilizar o formato `CamelCase`
- Use nomes informativos para os objeto
- Não faça reuso do nome dos objetos em uma mesma análise

```{r, collapse = TRUE, eval = FALSE}
# Bom :)
empregados_admitidos_2022

# Ruim :(
num.emp.adm.2022
NumeroEmpregadosAdmitidos2022
EMP_2_2022
```



## Sequências

O `R` possui algumas funcionalidades para gerar sequências numéricas:


```{r, echo = TRUE, collapse = TRUE}
# Sequencias
1:7

seq(from = 1, to = 10, by = 2)

letters[1:8] 

rep(2, times = 5)

rep(c(6, 7), each = 3)
```

## Operações lógicas

O `R` possui **dois** valores lógicos, `TRUE` e `FALSE`. Os operadores de comparação entre dois objetos são: 

- `==` &nbsp; igual  
- `!=` &nbsp; diferente
- `<` &nbsp; menor que
- `>` &nbsp; maior que 
- `<=` &nbsp; menor ou igual que
- `>=` &nbsp; maior ou igual que


## Operações lógicas

Seguem alguns exemplos de como são feitas as comparações entre dois valores: 

```{r, echo = TRUE, collapse = TRUE}
# Operacoes logicas
4 >= 3

"a" == "A"

c(12, 4) != c(12, 5)

4 < pi
```

## Selecionando elementos em um vetor

Para selecionar um ou mais elementos de um vetor, utilizamos o operador `[ ]`

```{r, echo = TRUE, collapse = TRUE}
# Vetor com informacoes de receita (em mil reais)
receita <- c(43.9, 45.4, 48.2, 51.8, 56.5)

# Selecionar o primeiro elemento
receita[1]

# Selecionar uma sequência de elementos
receita[3:5]
```


## Selecionando elementos em um vetor

Para exluir elementos do vetor, utilizamos o sinal `-` antes do indexador da posição

```{r, echo = TRUE, collapse = TRUE}
# Excluir o primeiro elemento
receita[-1]

# Excluir uma sequência de elementos
receita[-c(3:5)]

# Excluir o último elemento
receita[-c(length(receita))] 
```

## Selecionando elementos em um vetor

Podemos utilizar operações lógicas para selecionar elementos em um vetor

```{r, echo = TRUE, collapse = TRUE}
#| code-line-numbers: "1|1-5|1-8|1-12|1-17"
valores <- c(13, 18, 25, 7, NA, 36)

# Selecao de elementos
valores[valores > 15]

valores[!is.na(valores)]

# Interseção (E)
valores[!is.na(valores) & valores > 15]

# União (OU)
x <- 1:10
x[x < 5 | x > 8]
```


## Regras de Etiqueta :bookmark:  (3)

<h2><font color="736f72"> Espaçamento </font> </h2>

- É uma boa prática colocar um espaço antes e depois de cada operador fixo (`=`, `+`, `-`, `<-`, etc)
- Sempre coloque um espaço após a vírgula e nunca antes (como no português escrito). 

```{r, echo = TRUE, collapse = TRUE}
# Bom :)
idade <- c(19, 21, 23, 24, 25, 31, 33)
media_idade <- mean(idade, na.rm = TRUE)

# Ruim :(
idade<-c(19 ,21,23 ,24,25 ,31 ,33)
media_idade<-mean(idade,na.rm=TRUE)
```

## 🚀 Quizz \#2 {.inverse background-color="#386FA4"}

Considere o vetor `lista_vegana <- c("maca", "banana", "laranja", "kiwi", "batata", "brocolis")`

- Quantos elementos o vetor `lista_vegana` possui?
- Qual a classe do vetor?
- Selecione o elemento `laranja`
- Selecione apenas os vegetais utilizando a condição `|`
- Exclua o elemento `kiwi` baseado na sua posição no vetor
- Adicione `tomate` ao vetor.

```{r, echo = FALSE, collapse = TRUE}
countdown::countdown(
  minutes = 5
)
```


# Data Frames

## Data frames
Um **data frame** é uma das estruturas mais importantes para armazanamento de dados. Equivale, de certa forma, às *planilhas eletrônicas* com linhas e colunas. 


* Um data frame é um conjunto de vetores de mesmo tamanho;
* Cada **linha** representa informações para uma única unidade de observação
* Cada **coluna** representa uma característica observada das unidades;
* Elementos da mesma coluna devem ser do mesma classe.  

![](images/data_frame.png){fig-align="center"}


## Data frames

É possível criar, carregar (dados dos pacotes) ou ler arquivos diretamente no `R`. Para criar um data frame, fazemos:

```{r, echo = TRUE, collapse = TRUE}
alunos_ufpb <- data.frame(
  aluno = c("José", "Maria", "Pedro", "Carla", "Isabel"),
  economia = c(1, 0, 0, 1, 1),
  periodo = c(3, 4, 7, 2, 3),
  cra = c(7.34, 8.45, 8.05, 7.98, 9.03)
  )

alunos_ufpb
```

## Data frames

Para carregar dados dos pacotes, fazemos:

```{r, echo = TRUE, collapse = TRUE}
#install.packages("dados")
head(dados::dados_gapminder)
```

## Data frames

Algumas características dos dados:

```{r, echo = TRUE, collapse = TRUE}
# Estrutura dos dados
str(dados::dados_gapminder)

# Listar variaveis
names(dados::dados_gapminder)
```

## 

![](images/10_lines_code.jpeg){fig-align="center"}