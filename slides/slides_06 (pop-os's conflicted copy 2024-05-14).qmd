---
title: Análise de Dados e Documentos Dinâmicos
subtitle: Tópico VI - Documentos Dinâmicos
format: thinkridentity-revealjs
author: Antonio Vinícius Barbosa
date: last-modified
date-format: "DD-MM-YYYY"
from: markdown+emoji
---


# Documentos Dinâmicos

## Literate programming

> A ideia do **Literate programming** consiste em combinar inputs e
> outputs com o objetivo de criar documentos reproduzíveis

-   De forma geral, combina o texto da forma usual com elementos de
    programação.
-   Assim, os diversos elementos são combinados para gerar um documento
    reprodutível e auto explicativo

![](https://images.wisegeek.com/slideshow-mobile-small/math-cypher.jpg){fig-align="center"
width="800"}


## Pacotes

Alguns pacotes do `R` permitem a integração de textos e códigos

-   `sweave`: permitia que o código R fosse integrado a documentos LaTeX
-   `knitr`: variação do Markdown que permite a junção de códigos
-   `rmarkdown`: permite a construção de textos, apresentações, sites...

. . .

Atualmente, o `quarto` é a ferramenta mais completa para gerar documentos dinâmicos

![](https://www.rebeccabarter.com/blog/img/quarto/quarto.jpg){fig-align="center" width="800"}

# `quarto` 

## `quarto`

-   `quarto` é um sistema de publicação científica e técnica de código
    aberto
-   É possível combinar texto narrativo e código para produzir uma saída
    elegantemente formatada como documentos, páginas da Web, postagens
    de blog, livros e muito mais.

Para instalar, fazemos:

```{r,  eval = FALSE, echo = TRUE, collapse = TRUE}
#Instalar pacote
install.packages("rmarkdown")
install.packages("quarto")
```

![](https://jthomasmock.github.io/quarto-2hr-webinar/materials/images/horst_quarto_schematic.png){fig-align="center"
width="800"}


## `quarto`


![](https://quarto.org/docs/get-started/hello/images/rstudio-hello.png){fig-align="center"
width="800"}

## Como o `quarto` funciona?

![](https://quarto.org/docs/get-started/hello/images/rstudio-qmd-how-it-works.png){fig-align="center"
width="800"}

* Ao renderizar um documento `quarto`, primeiro o `knitr` executa todos os blocos de código e cria um novo documento `markdown` (.md) que inclui o código e sua saída. 
* O arquivo `markdown` gerado é então processado pelo `pandoc`, que cria o formato finalizado. 
* O botão `Render` encapsula essas ações e as executa na ordem certa.


## Criando um documento `quarto`

- Para criar um novo documento vá em `File > New File > Quarto Document`
- Alternativamente, utilize os comandos `Ctrl+Shift+P` para criar um novo documento

![](https://quarto.org/docs/get-started/authoring/images/rstudio-new-document.png){fig-align="center"
width="800"}


## Renderização

Use o botão  Render no RStudio IDE para renderizar o arquivo e visualizar a saída com um único clique ou atalho de teclado (Ctrl + Shift + K).


![](https://quarto.org/docs/get-started/hello/images/rstudio-render.png){fig-align="center"
width="800"}

Ao renderizar, o `quarto` gera um novo arquivo que contém texto, código e resultados selecionados do arquivo `.qmd`. O novo arquivo pode ser um documento HTML,PDF, MS Word, apresentação, website, livro, documento interativo ou outro formato.


## Formas de visualização

Existem dois tipos de editores: **Source** e **Visual**

![](https://quarto.org/docs/get-started/hello/images/rstudio-source-visual.png){fig-align="center"
width="800"}



## A anatomia de um documento

Há três componentes principais em um documento `Quarto`:

- Os **metadados** (`YAML`) contêm as informações básicas do documento, tais como título,
autor e o tipo de output, além de outras opções. Este componente está compreendido entre três linhas (`---`).
- O **corpo** do documento, escrito em `Markdown`.
- O bloco de código (ou *code chunk*) com a indicação da linguagem utilizada a ser executada.

## A anatomia de um documento

Como exemplo, considere o seguinte código

````
---
title: "ggplot2 demo"
date: "5/22/2021"
format: html
---

## Air Quality

There is a relationship between temperature and the ozone level.

```{{r}}
#| label: fig-airquality
library(ggplot2)
ggplot(airquality, aes(Temp, Ozone)) + 
  geom_point() + 
  geom_smooth(method = "loess"
)
```
````


## Metadata: `YAML`

Como vimos, os metadados são inseridos entre os três traços (`---`).
A sintaxe dos metadados é o `YAML` (YAML Ain’t Markup Language). Nela, inserimos
informações básicas do documento, tais como o título, data:


````{{r}}
---
key: value
---

````

. . . 

Por exemplo, para inserir o título fazemos:

````{{r}}
---
title: "Meu primeiro documento"
---
````

. . . 

Para inserir data no documento:

````{{r}}
---
date: 09/05/2023
---
````

## Opções de Formatos

Existem várias opções de formatos. Para o formato HTML:

````{{r}}
---
format: html
---
````

Para documentos com formato PDF:

````{{r}}
---
format: pdf
---
````

Para apresentações, utilizamos:


````{{r}}
---
format: revealjs
---
````


Outras opções disponíveis podem ser vistas neste [link](https://quarto.org/docs/output-formats/all-formats.html).


## Opções de Formatos

Além disso, é possível definir opções dentro de um formato:

````{{r}}
---
format: 
  html:
    toc: true
    code-fold: true
---
````

Notar que a identação (espaçamento) importa no YAML.


## `format: html`

* Para outras opções do formato HTML, ver a [documentação](https://quarto.org/docs/reference/formats/html.html).
* Além disso, ver o [guia de referência](https://quarto.org/docs/output-formats/html-basics.html).   


## Markdown: elementos textuais

- Desenvolvido em 2004 por John Gruber e Aaron Swartz para simplificar a estruturação de um texto, o **Markdown** é um sistema de formatação aberto que torna a escrita e a leitura mais simples. Com uma codificação mínima, além de fácil, ele é visualmente mais "limpo" e pode ser convertido facilmente para HTML.

![](https://www.digitec.ch/im/Files/7/5/6/9/3/5/6/6/WhatsApp_Text_Formatting_Static.webp?impolicy=PictureComponent&resizeWidth=992&resizeHeight=558){fig-align="center" width="800"}

## Sintaxe Markdown

Do lado esquerdo temos alguns exemplos da sintaxe do Markdown e, do
lado direito, o resultado gerado.

![](images/sintaxe_plain.png){fig-align="center" width="800"}

## Sintaxe Markdown


Para inserir seções e subseções no texto, fazemos através do símbolo \#

![](images/markdown_sections.png){fig-align="center" width="800"}



## Sintaxe Markdown

Para inserir tópicos, listas ordenadas e tabelas no Markdown, utilizamos
a seguinte sintaxe:

![](images/markdown_lists.png){fig-align="center" width="800"}

## Adicionando links e hyperlinks

Para adicionar um link, podemos fazer:


````{{r}}
A [UFPB](https://www.ufpb.br/) é a maior universidade do estado.
````

A [UFPB](https://www.ufpb.br/) é a maior universidade do estado.


Ou diretamente, através de:


````{{r}}
Website da UFPB: <https://www.ufpb.br/>
````

Website da UFPB: <https://www.ufpb.br/>


## Bloco de códigos

Um bloco de código (ou *code chunks*) possui a seguinte estrutura básica:

````
```{{r}}
#| label: car-stuff
#| echo: false
mtcars |>  
  distinct(cyl)
```

````

. . . 

* Um código é inserido entre os símbolos ` ``` `
* `{r}` siginifica a linguagem que o código será executado
* As opções de execução são inseridos através de comentário especial `#|` (hashpipe)

## Códigos em linha

Para incluir expressões executáveis, utilizamos a notação  `'r '` . Por exemplo, podemos usar código embutido para indicar o número de observações em nossos dados. 


> A base `mtcars` possui `r nrow(mtcars)` linhas e `r ncol(mtcars)` colunas. 




## Bloco de códigos

* A forma como adicionamos códigos no documento depende do contexto.
* Para fins didáticos, é sempre importante mostrar o código e o resultado gerado.
* Para relatórios e trabalhos acadêmicos, no entanto, podemo omitir o código e 
apresentar apenas o output.


## Bloco de códigos

Por exemplo, as opções `eval` e `echo` mudam a forma de apresentação e execução:

````
```{{r}}
#| eval: true
#| echo: true
head(mtcars)
```

````

O código gera o seguinte resultado

```{r}
#| eval: true
#| echo: true
head(mtcars)
```


## Bloco de códigos

Para apresentar apenas o output, fazemos:

````
```{{r}}
#| eval: true
#| echo: false
head(mtcars)
```

````

Obtendo, como resulado:

```{r}
#| eval: true
#| echo: false
head(mtcars)
```


## Bloco de códigos

Ainda, é possível apresentar apenas o código, mas não executar:

````
```{{r}}
#| eval: false
#| echo: true
head(mtcars)
```

````

Obtendo, como resulado:

```{r}
#| eval: false
#| echo: true
head(mtcars)
```


## Outras opções de execução

* `include:` (`true`) Inclui o resultado do código no documento.
* `message:` (`true`) Inclui mensagem do `R`.
* `warning:` (`true`) Inclui avisos do `R`.
* `output:` (`true`) Como e se incluir os resultados.
* `label: ` Adicionar um label para um código
* `collapse` (`true`) Junta código e resultado num mesmo quadro.



## Outras opções de execução

````
```{{r}}
#| label: meu_histograma
#| eval: true
#| echo: true
#| warning: false
#| message: false
#| collapse: true
head(mtcars)
```

````
 Como resultado, obtemos:


```{r}
#| label: minha_soma
#| eval: true
#| echo: true
#| warning: false
#| message: false
#| collapse: true
c(1, 1) + c(2, 4, 5)
```


## Destacando partes do código

É possível destacar linhas (ou conjunto de linhas de um código):

```{r}
#| label: meu_histograma
#| eval: false
#| echo: fenced
#| code-line-numbers: "|5|7-11|"
library(ggplot2)

ggplot(data = mtcars) +
  geom_histogram(
    aes(x = hp), bins = 10
  ) +
  theme_minimal()

```


## Callout Blocks

- Os *Callout Blocks* são uma excelente maneira de chamar atenção para determinados 
conceitos.

- Existem cinco tipos diferentes de chamadas disponíveis:

  + `note`
  + `warning`
  + `important`
  + `tip`
  + `caution`
  
## Callout Blocks

````{{r}}
:::{.callout-note}
## Importante
Este é um exemplo para notas!
:::
````


````{{r}}
:::{.callout-tip}
## Dica
Este é um exemplo para dicas!
:::
````


## Callout Blocks

````{{r}}
:::{.callout-warning}
## Aviso
Este é um exemplo para avisos!
:::
````



````{{r}}
:::{.callout-important}
## Importante
Este é um exemplo para algo importante!
:::
````

## Callout Blocks


:::{.callout-note}
## Importante
Este é um exemplo para notas!
:::


:::{.callout-tip}
## Dica
Este é um exemplo para dicas!
:::

## Callout Blocks

:::{.callout-warning}
## Aviso
Este é um exemplo para avisos!
:::

:::{.callout-important}
## Importante
Este é um exemplo para algo importante!
:::


## Inserindo figuras

`quarto` possui uma série de ferramentas para introduzir finguras nos documentos.
Para introduzir uma figura em Markdown, fazemos


````{{r}}
![Elefante](elefante.jpg)
````

![Elefante](images/elefante.jpg)

## Opções de figuras

Para alterar as dimensões de uma figura, utilizamos os parâmetros `width` e `height`.
Além disso, podemos ajustar o alinhamento através de `fig-align`.


````{{r}}
![Elefante](elefante.jpg){width=200 fig-align="left"}
````

![Elefante](images/elefante.jpg){width=200 fig-align="left"}


## Figuras através de links

Para inserir figuras externas, obtidas através de links, fazemos:


````{{r}}
![Caramelo](https://p16.resso.me/img/tos-alisg-i-0000/d0b1ea1759d84159a3bbd11952613b68~c5_500x500.jpg){width=100 fig.align="center"}
````


![Caramelo](https://p16.resso.me/img/tos-alisg-i-0000/d0b1ea1759d84159a3bbd11952613b68~c5_500x500.jpg){width=100 fig.align="center"}


## Subfiguras

Para adicionar múltiplas figuras, fazemos:


````{{r}}
::: {#fig-elephants layout-ncol=2}

![Subfigura 1](https://quarto.org/docs/gallery/interactive/interactive-jupyter.png)

![Subfigura 2](https://quarto.org/docs/gallery/articles/advanced-layout-pdf.png)

Famous Elephants
:::
````


## Subfiguras

::: {#fig-elephants layout-ncol=2}

![Subfigura 1](https://quarto.org/docs/gallery/interactive/interactive-jupyter.png)

![Subfigura 2](https://quarto.org/docs/gallery/articles/advanced-layout-pdf.png)

Exemplo de documentos `quarto`
:::




## Tabelas


Uma das formas de adicionar tabelas é através da função `kable` do pacote `knitr`

```{r}
#| eval: false
knitr::kable(
  dados::dados_starwars[1:5,1:5],
  caption = "Personagens Starwars",
  col.names = c("Personagem", "Altura (m)", "Massa (kg)", 
                "Cor do cabelo", "Cor da pele"),
   align = c("c", "r", "r", "l", "l")
)
```

## Tabelas

```{r}
#| eval: true
#| echo: false
knitr::kable(
  dados::dados_starwars[1:5,1:5],
  caption = "Personagens Starwars",
  col.names = c("Personagem", "Altura (m)", "Massa (kg)", 
                "Cor do cabelo", "Cor da pele"),
   align = c("c", "r", "r", "l", "l")
)
```

Para outras opções de costumização das tabelas, é recomendado o pacote `kableExtra`


#  Apresentações


## Apresentações

O `quarto` suporta alguns formatos para criar apresentações:

- `revealjs` — reveal.js (HTML)
- `pptx` — PowerPoint (MS Office)
- `beamer` — Beamer (LaTeX/PDF)

Enquanto o formato `pptx` e `beamer` geram apresentações estáticas, o formato
`revealjs` gera aprensetações mais flexíveis.


## Criando apresentações

Em Markdown, os slides são delineados usando seções. Por exemplo, esta é uma apresentação simples com dois slides (cada um definido com um título de nível 2 (\#\#):



````{{r}}
---
title: "Apresentacao ICDR"
author: "Antonio Vinicius"
format: revealjs
---

## Slide 1

- Apresentacao
- Objetivos

## Slide 2

- Resultados
- Conclusão

````


## Criando apresentações

Para dividir os slides por seções, podemos introduzir títulos de nível 1 (\#)


````{{r}}
---
title: "Apresentacao ICDR"
author: "Antonio Vinicius"
format: revealjs
---

# Parte 1

## Slide 1

- Apresentacao
- Objetivos


# Parte 2

## Slide 2

- Resultados
- Conclusão

````


## Listas incrementais

Por default, os *bullets* em um slide são apresentados de única vez. Podemos, no
entanto, utilizar listas incrementais, conforme o exemplo a seguir:

````{{r}}
---
title: "Apresentacao ICDR"
author: "Antonio Vinicius"
format: revealjs
---

## Slide 1

::: {.incremental}

- Apresentacao
- Objetivos

:::


````

## Listas incrementais

É possível definir as listas incrementais de maneira global. Isto tornará
default durante toda a apresentação:

````{{r}}
---
title: "Apresentacao ICDR"
author: "Antonio Vinicius"
format: 
  revealjs:
    incremental: true
---

## Slide 1

- Apresentacao
- Objetivos

````


## Slides com pausas

Para adicionar pausas dentro de um slide, inserimos três pontos (`. . .`) separados por espaços:


````{{r}}
---
title: "Apresentacao ICDR"
author: "Antonio Vinicius"
format: 
  revealjs:
    incremental: true
---

## Slide 1

Texto inicial, antes da pausa

. . .

- Item 1
- Item 2

````


## Múltiplas Colunas


Para inserir colunas lado a lado, você pode usar a classe `.columns`, contendo dois ou mais elementos `.columns` e o atributo `width`, conforme o exemplo a seguir:


````{{r}}
---
title: "Apresentacao ICDR"
author: "Antonio Vinicius"
format: revealjs
---

## Slide 1

:::: {.columns}

::: {.column width="40%"}
Coluna 1
:::

::: {.column width="60%"}
Coluna 2
:::

::::

````


## Adicionando guias

Para adicionar guias (ou *tabset panel*), utilizamos a classe `.panel-tabset`. Note
que é importante incluir seções (\#\#) para cada guia. Considere o exemplo abaixo


::: {.panel-tabset}

## Guia 1

Inserir conteúdo da guia 1

## Guia 2

Inserir conteúdo da guia 2

:::


## Adicionando guias

Para obter as guias, fazemos:


````{{r}}
---
title: "Apresentacao ICDR"
author: "Antonio Vinicius"
format: revealjs
---

## Slide 1

::: {.panel-tabset}

## Guia 1

Inserir conteúdo da guia 1

## Guia 2

Inserir conteúdo da guia 2

:::

````

## Transições de slides

Para os diferentes tipos de transições de slides, temos

- `none`: sem transição (instantâneo)
- `fade`:	cross fade
- `slide`:	Slide horizontal
- `convex`:	slide convexo
- `concave`:	slide côncavo
- `zoom`: do centro para fora da tela


````{{r}}
---
format: 
  revealjs:
    transition: fade
    transition-speed: fast
---
````

## Numerando slides

Para adicionar o número do slide, fazemos

````{{r}}
---
format: 
  revealjs:
    slide-number: c/t
---
````

Onde `c/t` significa slide corrente/total de slides. Outras
opões são `c`, `h.v`, `h/v`.


## Adicionando texto de rodapé

````{{r}}
---
format:
  revealjs: 
    footer: "Meu texto de rodapé"
---
````

Para adicionar um texto de rodapé numa apresentação:

## Quizz #1 {.inverse background-color="#386FA4"}
:::: {.columns}

::: {.column width="50%"}
- Crie uma nova apresentação revealjs no Quarto.
- Mude o `YAML`:
  + Nome do autor: eu nome
  + Título: “Minha primeira apresentação Quarto!”
  + Adiciona o número do slide 
  + Inserir rodapé: “Minha apresentação!”
- No segundo slide, adiciona uma lista incremental sobre as top 5 
disciplinas que você mais gostou no curso.
:::

::: {.column width="50%"}

- Adicionar um slide com 2 colunas. No lado direito, adicionar apenas o `code chunk`
e no lado direito apenas o resultado da execução.
- Adicionar um slide com 2 guias. Na primeira guia, adicionar apenas o `code chunk`
e na segunda guia apenas o resultado da execução.
- No próximo slide, adicione uma figura externa
- Gere a apresentação!
:::

::::

```{r, echo = FALSE, collapse = TRUE}
countdown::countdown(
  minutes = 15
)
```


# Formatação temas

## Formatação de temas

- Algo importante na construção de documentos é a formatação do estilo,
também conhecido como **temas**
- Os temas referem-se a composição de:
  * Cores
  * Fontes
  * Tamanhos

- A formatação depende do formato usado (`.html`, `.pdf`, `.pptx`)


## Formatação de temas

Para iniciar a formatação de temas, vamos iniciar com o documento padrão do
`quarto`, adicionando o parâmetro `theme` no YAML:

```{{r}}
---
title: "Meu documento"
format: 
  html:
    theme: united
---
```

Neste caso, utilizamos o tema `united`. Para uma lista de 25 temas personalizados, ver este [link](https://quarto.org/docs/output-formats/html-themes.html).


## Formatação de temas

Algumas opções básicas:

```{{r}}
---
title: "Meu documento"
format: 
  html:
    theme: united
    fontsize: 1.5em
    mainfont: "Arial"
    fontcolor: "darkblue"
    linkcolor: "#FFF8E8"
    backgroundcolor: "white"
---
```



## Gerando PDF


Para gerar arquivos PDF, é necessário instalar uma distribuição TeX. No terminal, fazer:


````{{r}}
quarto install tool tinytex
````

Uma vez instalado, ajustamos o formato do documento:


````{{r}}
---
format: pdf
---
````


## Nome do autor e filiação

````{{r}}
---
author:
  name: Antonio Vinícius
  affiliation: Universidade Federal da Paraíba
  email: antonio.barbosa@academico.ufpb.br
format: pdf
---
````

## Classe do documento

Para definir a classe do documento, utilizamos

````{{r}}
---
format: 
  pdf:
    documentclass: article
---
````

Outras opções mais comuns são: 

- `book` 
- `report`
- `memoir`

## Resumo

Para adicionar sumário e demais opções, fazemos:

````{{r}}
---
abstract: Inserir resumo
keywords:
  - Palavra-chave 1
  - Palavra-chave 2
  - Palavra-chave 3
format: pdf 
---
````


## Sumário

Para adicionar sumário e demais opções, fazemos:

````{{r}}
---
format: 
  pdf:
    documentclass: article
    toc: true
    toc-depth: 2
    toc-title: Sumário
---
````


## Lista de Figuras e Tabelas

Para adicionar listas de figuras e tabelas, fazemos:

````{{r}}
---
format: 
  pdf:
    documentclass: article
    lof: true
    lot: true
---
````

## Numerar seções

````{{r}}
---
format: 
  pdf:
    documentclass: article
    number-sections: true
    number-depth: 3
---
````

. . .

Caso não queiramos enumerar um seção específica, fazemos:

````{{r}}
### Minha seção {.unnumbered}
````


## Outras opções de formatação do PDF
:::: {.columns}

::: {.column width="60%"}
````{{r}}
title: "Meu documento"
format: 
  pdf: 
    documentclass: report
    classoption: [twocolumn, landscape]
    geometry:
      - top=30mm
      - left=20mm
      - heightrounded
    fontfamily: libertinus
    colorlinks: true
---
````
:::



::: {.column width="40%"}

- `documentclass`: classe do documento, como *article*, *report* ou *book* 
- `classoption`: estrutura *onecolumn*/*twocolumn*, *portrait*/*landscape* 
- `geometry`: recuo das margens
- `fontfamily`: usar fontes do sistema. Ver lista completa em `systemfonts::system_fonts()`
- `colorlinks`: destacar links do texto
:::


::::

## Citações

Ao criar PDFs, podemos optar pelo `natbib` ou `BibLaTeX`, dois sistemas de gerenciamento de referências. É necessário criar um documento auxiliar com formato `.bib`

````{{r}}
---
format: 
  pdf:
    documentclass: article
    cite-method: biblatex
    bibliography: references.bib
---
````

. . .

- As citações ficam entre colchetes e são separadas por ponto e vírgula, como em `[@citacao]` - para citações em parênteses e `[- @citacao]` para citações na linha.
- `[@citacao1; @citacao2]` é a sintaxe para múltiplas referências
- Cada citação deve possuir uma chave, composta por '@' + o identificador de citação da base de dados


## Citações

Para encontar a citação no formato `.bib`, podemos utilizar o [Google Acadêmico](https://scholar.google.com.br/)

![](images/citacao_1.png)

## Citações

Para encontar a citação no formato `.bib`, podemos utilizar o [Google Acadêmico](https://scholar.google.com.br/)

![](images/citacao_2.png)

Agora, basta copiar o conteúdo para o arquivo `references.bib` e salvar.


## Citações

Por fim, basta adicionar o label da referência (primeira linha), como em:

````{{r}}
De acordo com [- @lowry1951protein], ...
````

E adicionar as referência no final do documento como uma seção



````{{r}}
### References

::: {#refs}
:::
````

Desta forma

#  Publicação </font>


## `Quarto Pub`

`Quarto Pub` é um serviço gratuito de publicação de conteúdo criado com o Quarto. 
É ideal para blogs, sites de cursos ou projetos, livros e apresentações.

![](images/quartopub.png){fig-align="center"}

O primeiro passo consiste em criar uma conta gratuita no [Quarto Pub](https://quartopub.com/).


## `Quarto Pub`

Para publicar um conteúdo, é necessário criar um projeto no `RStudio`. Em seguida, digitar no Terminal

````{{r}}
quarto publish quarto-pub
````

Após isso, é necessário adicionar o login e senha cadastrados.


# Galeria </font>

## Galeria

Para aprender mais, ver galeria com exemplos e códigos ([link](https://quarto.org/docs/gallery/)).


![](images/gallery.png){fig-align="center"}